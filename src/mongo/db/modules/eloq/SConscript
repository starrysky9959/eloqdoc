Import("env")
Import("get_option")

import os
import sys
link_model = get_option('link-model')
SYSTEM_INCLUDE_PATH = ['/usr/include', '/usr/local/include', '/opt/include']
def FindIncludePath(file_name):
    """Search for a file in a list of directories."""
    for path in SYSTEM_INCLUDE_PATH:
        candidate = os.path.join(path, file_name)
        if os.path.exists(candidate):
            if os.path.isdir(candidate):
                return candidate
            else:
                return os.path.dirname(candidate)
    return None

SYSTEM_LIBRARY_PATH = ['/usr/lib','/usr/lib/x86_64-linux-gnu', '/usr/local/lib', '/opt/lib', '/usr/lib64', '/usr/local/lib64', '/opt/lib64']
def FindLibPath(lib_name):
    """Search for a static or dynamic library in a list of directories."""
    prefixes = ['lib']
    static_ext = '.a'

    if sys.platform == "darwin":
        dynamic_ext = '.dylib'
    else: # Assuming Linux or other Unix-like
        dynamic_ext = '.so'

    # Prefer dynamic link
    extensions = [dynamic_ext, static_ext]
    for ext in extensions:
        for path in SYSTEM_LIBRARY_PATH:
            for prefix in prefixes:
                base_name = prefix + lib_name + ext
                candidate = os.path.join(path, base_name)
                print("candidate:",candidate)
                if os.path.exists(candidate):
                    return candidate
    return None


env = env.Clone()
env.InjectMongoIncludePaths()

env["ELOQ_ENGINE_ROOT"]="#src/mongo/db/modules/eloq"


DATA_STORE_TYPE_DYNAMODB      = 1
DATA_STORE_TYPE_BIGTABLE      = 2
DATA_STORE_TYPE_ROCKSDB_CLOUD = 3
DATA_STORE_TYPE_ROCKSDB       = 4

ROCKSDB_CLOUD_FS_TYPE_S3  = 1
ROCKSDB_CLOUD_FS_TYPE_GCS = 2

# Read from environment variable (default to ROCKSDB_CLOUD if not set)
data_store_type_str = os.environ.get("WITH_DATA_STORE", "ELOQDSS_ROCKSDB_CLOUD_S3").upper()

# Map the environment variable value to the corresponding constant
if data_store_type_str == "DYNAMODB":
    data_store_type = DATA_STORE_TYPE_DYNAMODB
elif data_store_type_str == "BIGTABLE":
    data_store_type = DATA_STORE_TYPE_BIGTABLE
elif data_store_type_str == "ELOQDSS_ROCKSDB_CLOUD_S3":
    data_store_type = DATA_STORE_TYPE_ROCKSDB_CLOUD
elif data_store_type_str == "ELOQDSS_ROCKSDB":
    data_store_type = DATA_STORE_TYPE_ROCKSDB
else:
    # Default fallback (or raise an error if invalid)
    print("Warning: Unknown DATA_STORE_TYPE '{}'. Defaulting to ROCKSDB_CLOUD.".format(data_store_type_str))
    data_store_type = DATA_STORE_TYPE_ROCKSDB_CLOUD

if data_store_type == DATA_STORE_TYPE_ROCKSDB_CLOUD:
    env.Append(CPPDEFINES=[
        "DATA_STORE_TYPE_ELOQDSS_ROCKSDB_CLOUD_S3",
        ("ROCKSDB_CLOUD_FS_TYPE", ROCKSDB_CLOUD_FS_TYPE_S3)
    ])
elif data_store_type == DATA_STORE_TYPE_ROCKSDB:
    env.Append(CPPDEFINES=[
        "DATA_STORE_TYPE_ELOQDSS_ROCKSDB"
    ])

if os.environ.get("OPEN_LOG_SERVICE", "1") in ("1", "ON", "on", "true", "True"):
    env.Append(CPPDEFINES=["OPEN_LOG_SERVICE"])
    env["CPPPATH"].extend(["$ELOQ_ENGINE_ROOT/log_service/include"])
else:
    env["CPPPATH"].extend(["$ELOQ_ENGINE_ROOT/eloq_log_service/include"])

if os.environ.get("WITH_ROCKSDB_CLOUD", "0") in ("S3"):
    env.Append(CPPDEFINES=[("WITH_ROCKSDB_CLOUD", 1)])
if os.environ.get("WITH_ROCKSDB_CLOUD", "0") in ("GCS"):
    env.Append(CPPDEFINES=[("WITH_ROCKSDB_CLOUD", 2)])
if os.environ.get("FORK_HM_PROCESS", "0") in ("1", "ON", "on", "true", "True"):
    env.Append(CPPDEFINES=["FORK_HM_PROCESS"])

env.Append(CPPDEFINES=[
    "OVERRIDE_GFLAGS_NAMESPACE",
    "BRPC_WITH_GLOG",
    "USE_ROCKSDB_LOG_STATE",
    # "BRPC_ENABLE_CPU_PROFILER",
    "EXT_TX_PROC_ENABLED",
    "STATISTICS",
    ("GFLAGS_NAMESPACE", "gflags")
])
env["CPPPATH"].extend(SYSTEM_INCLUDE_PATH)
env["CPPPATH"].extend(
    [
        "$ELOQ_ENGINE_ROOT",
        "$ELOQ_ENGINE_ROOT/src",
        "$ELOQ_ENGINE_ROOT/src/base",
        "$ELOQ_ENGINE_ROOT/src/eloq_data_store_service",
        "$ELOQ_ENGINE_ROOT/tx_service/include",
        "$ELOQ_ENGINE_ROOT/tx_service/include/cc",
        "$ELOQ_ENGINE_ROOT/tx_service/include/fault",
        "$ELOQ_ENGINE_ROOT/tx_service/include/proto",
        "$ELOQ_ENGINE_ROOT/tx_service/include/remote",
        "$ELOQ_ENGINE_ROOT/tx_service/include/store",
        "$ELOQ_ENGINE_ROOT/tx_service/include/sequences",
        "$ELOQ_ENGINE_ROOT/tx_service/tx-log-protos",
        "$ELOQ_ENGINE_ROOT/tx_service/abseil-cpp",
        "$ELOQ_ENGINE_ROOT/store_handler",
        "$ELOQ_ENGINE_ROOT/eloq_metrics/include",
        FindIncludePath("mimalloc-2.1"),
        FindIncludePath("aws/core"),
        FindIncludePath("aws/kinesis"),
        FindIncludePath("aws/s3"),
        # FindIncludePath("google/cloud/storage"),
        FindIncludePath("rocksdb_cloud_header/"),
        FindIncludePath("rocksdb_cloud_header/rocksdb"),
        FindIncludePath("rocksdb_cloud_header/rocksdb/cloud"),
        # FindIncludePath("gperftools/heap-profiler.h")
    ]
)

if data_store_type == DATA_STORE_TYPE_ROCKSDB_CLOUD:
    env["CPPPATH"].extend(
        [
            FindIncludePath("aws/core"),
            FindIncludePath("aws/kinesis"),
            FindIncludePath("aws/s3"),
            # FindIncludePath("google/cloud/storage"),
            FindIncludePath("rocksdb_cloud_header/"),
            FindIncludePath("rocksdb_cloud_header/rocksdb"),
            FindIncludePath("rocksdb_cloud_header/rocksdb/cloud"),
            # FindIncludePath("gperftools/heap-profiler.h")
        ]
    )
elif data_store_type == DATA_STORE_TYPE_ROCKSDB:
    env["CPPPATH"].extend(
        [
            FindIncludePath("rocksdb"),
        ]
    )

base_deps = [
    # FindLibPath("absl_bad_variant_access"),
    # FindLibPath("absl_bad_optional_access"),
    # FindLibPath("absl_str_format_internal"),
    FindLibPath("mimalloc"),
    FindLibPath("gflags"),
    FindLibPath("protobuf"),
    FindLibPath("glog"),
    FindLibPath("brpc"),
    FindLibPath("braft"),
    # FindLibPath("tcmalloc_and_profiler"),
]

if data_store_type == DATA_STORE_TYPE_ROCKSDB_CLOUD:
   store_deps = [
      # FindLibPath("rocksdb"),
      FindLibPath("aws-cpp-sdk-core"),
      FindLibPath("aws-cpp-sdk-kinesis"),
      FindLibPath("aws-cpp-sdk-s3"),
      # FindLibPath("google_cloud_cpp_common"),
      # FindLibPath("google_cloud_cpp_storage"),
      FindLibPath("rocksdb-cloud-aws"),
      # FindLibPath("rocksdb-cloud-gcp"),
   ]
elif data_store_type == DATA_STORE_TYPE_ROCKSDB:
   store_deps = ["rocksdb"]

eloq_dependencies = base_deps + store_deps

env.Append(LIBPATH=["$ELOQ_ENGINE_ROOT/build/tx_service/abseil-cpp/absl/base"])
env.Append(LIBS=["absl_log_severity", "absl_raw_logging_internal"])

print("CPPDEFINES: ", env["CPPDEFINES"])
print("CPPPATH: ", env["CPPPATH"])
print("LIBPATH: ", env["LIBPATH"])
print("LIBS: ", env["LIBS"])
print("LINKFLAGS: ", env["LINKFLAGS"])
print("eloq_dependencies: ", eloq_dependencies)
print("MALLOC:", env['MONGO_ALLOCATOR'])


env.Library(
    target="storage_eloq_core",
    source=[
        "src/eloq_kv_engine.cpp",
        "src/eloq_record_store.cpp",
        "src/eloq_recovery_unit.cpp",
        "src/eloq_index.cpp",
        "src/eloq_cursor.cpp",
        "src/eloq_options_init.cpp",
        "src/eloq_global_options.cpp",
        "src/base/eloq_key.cpp",
        "src/base/eloq_record.cpp",
        "src/base/eloq_table_schema.cpp",
        "src/base/eloq_catalog_factory.cpp",
        "src/base/eloq_util.cpp",
        "src/base/metrics_registry_impl.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
        "$BUILD_DIR/mongo/db/namespace_string",
        "$BUILD_DIR/mongo/db/server_options_servers",
        "$BUILD_DIR/mongo/db/storage/key_string",
        "$BUILD_DIR/mongo/db/storage/kv/kv_prefix",
        "$BUILD_DIR/mongo/db/service_context",
        "$BUILD_DIR/mongo/db/storage/index_entry_comparison",
        "$BUILD_DIR/mongo/db/storage/oplog_hack",
        "$BUILD_DIR/mongo/db/storage/kv/kv_engine",
        "$ELOQ_ENGINE_ROOT/build/txservice",
        "$ELOQ_ENGINE_ROOT/build/logservice",
        "$ELOQ_ENGINE_ROOT/build/datastore",
        "$ELOQ_ENGINE_ROOT/build/eloq_metrics",
    ],
    LIBDEPS_PRIVATE=[],
    SYSLIBDEPS=eloq_dependencies,
)

env.Library(
    target="storage_eloq",
    source=[
        "src/eloq_init.cpp",
    ],
    LIBDEPS=[
        # "$BUILD_DIR/mongo/db/db_raii",
        # "$BUILD_DIR/mongo/db/storage/storage_engine_impl",
        "$BUILD_DIR/mongo/db/storage/storage_engine_lock_file",
        "$BUILD_DIR/mongo/db/storage/storage_engine_metadata",
        "$BUILD_DIR/mongo/db/storage/kv/kv_engine",
        "storage_eloq_core",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/db/storage/storage_engine_common",
    ],
    LIBDEPS_DEPENDENTS=["$BUILD_DIR/mongo/db/serveronly"],
)
